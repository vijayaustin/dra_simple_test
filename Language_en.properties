# NLS_MESSAGEFORMAT_NONE
# NLS_ENCODING=UTF-8
ExtName=(Experimental) DRA Simple Pre-deploy Check
ExtDesc=Check Environment
ExtMessage=This extension checks a supplied list of Bluemix services and applications against the bluemix estado site for the app's region.  If any of these are not found or are unavailable, the job will fail.

USER_ID_KEY=Username - DRA TEST
USER_ID_DESC=The Sauce Labs username.  Tests should use the SAUCE_USERNAME environment variable..

APPLICATION_NAME_KEY=Application Name
APPLICATION_NAME_DESC=An application name to be assigned during deployment. The name is assigned to the ${CF_APP} environment variable and is referenced in the IBM Bluemix script. The name will override an application name supplied in the manifest.yml file. If no name is supplied, the manifest.yml application name will be used. The name is required if no manifest.yml file is available in the build archive.<script>function DraSimplePredeployCheck(ctx){this.draInputId=0; this.testCaseList=[]; this.idList=[]; this.grandParent=null; this.parent=null; console.log( "this: " ); console.log( ctx ); var scriptTag=document.getElementsByTagName( 'script' ); scriptTag=scriptTag[ scriptTag.length - 1]; var parentTag=scriptTag.parentNode; this.ctx=parentTag; if( window.jQuery ){this.ctx=$( '[for$="ibm.devops.services.pipeline.tryout_dra_simple_test-APPLICATION_NAME"]' ).siblings( ".help-text:not([DraSimplePredeployCheck])" ); this.ctx.attr( 'DraSimplePredeployCheck', '' ); this.init();}else{window.addEventListener( "load", function(){$( this.ctx ).attr( 'DraSimplePredeployCheck', '' ); this.init();}.bind( this ) );}}DraSimplePredeployCheck.prototype.init=function(){console.log( this ); console.log( $( this.ctx ).parent().parent() ); this.grandParent=$( this.ctx ).parent().parent(); /*this.grandParent.children().css( "padding-left", "25px" );*/ /*this.grandParent.children().eq(0).css( "padding-left", "0px" );*/ /*this.grandParent.children().eq(1).css( "padding-left", "0px" );*/ /*this.grandParent.children().eq(1).after( "<label>Unit Test</label>" );*/ /*this.grandParent.children().eq(6).after( "<label>Coverage</label>" );*/ /*this.parent=this.grandParent.children().eq(13);*/ this.parent=this.grandParent.children().eq(1); this.parent.find( "input" ).addClass( "hidden" ); this.loadCurrentTestCases(); this.parent.append( '<div style="display: table; margin:0 auto; margin-top:5px"><button class="btn btn-primary">Add</button></div>'); this.parent.children( 'div:last' ).children( ':button' ).on( 'click', function( event ){var ctx=event.currentTarget; console.log( ctx ); this.add();}.bind( this ) );};DraSimplePredeployCheck.prototype.loadCurrentTestCases=function(){var str=this.parent.find("input").val(); console.log( str ); if( str=="" ){this.parent.append( '<div style="display: table; margin:0 auto; margin-top:5px"><input id="" class="form-control" dra-input-id="' + this.draInputId + '" type="input" style="display:inline; width:initial;" ><button class="btn btn-primary" style="width: 74px;">Save</button><button class="btn btn-danger" style="background-color:#f04e36;border-color:#f04e36;">Remove</button></div>'); this.parent.children( 'div:last' ).children( '.btn-primary' ).on( 'click', function( event ){this.editOrSave( event.currentTarget );}.bind( this ) ); this.parent.children( 'div:last' ).children( '.btn-danger' ).on( 'click', function( event ){this.remove( event.currentTarget );}.bind( this ) ); this.draInputId++;}else{var pastTestCases=str.split( "," ); for( var i=0 ; i < pastTestCases.length ; i++ ){this.parent.append( '<div style="display: table; margin:0 auto; margin-top:5px"><input id="" class="form-control" dra-input-id="' + this.draInputId + '" type="input" value="' + pastTestCases[ i] + '" style="display:inline; width:initial;" disabled><button class="btn btn-primary" style="width: 74px;">Edit</button><button class="btn btn-danger" style="background-color:#f04e36;border-color:#f04e36;">Remove</button></div>'); this.parent.children( 'div:last' ).children( '.btn-primary' ).on( 'click', function( event ){this.editOrSave( event.currentTarget );}.bind( this ) ); this.parent.children( 'div:last' ).children( '.btn-danger' ).on( 'click', function( event ){this.remove( event.currentTarget );}.bind( this ) ); this.testCaseList[ this.draInputId]=pastTestCases[ i]; this.draInputId++;}}};DraSimplePredeployCheck.prototype.add=function(){this.parent.children( "div:last" ).before( '<div style="display: table; margin:0 auto; margin-top:5px"><input id="" class="form-control" dra-input-id="' + this.draInputId + '" type="input" style="display:inline; width:initial;" ><button class="btn btn-primary" style="width: 74px;">Save</button><button class="btn btn-danger" style="background-color:#f04e36;border-color:#f04e36;">Remove</button></div>'); this.parent.children( 'div:nth-last-child(2)' ).children( '.btn-primary' ).on( 'click', function( event ){this.editOrSave( event.currentTarget );}.bind( this ) ); this.parent.children( 'div:nth-last-child(2)' ).children( '.btn-danger' ).on( 'click', function( event ){this.remove( event.currentTarget );}.bind( this ) ); this.draInputId++;};DraSimplePredeployCheck.prototype.editOrSave=function( ctx ){var value=$( ctx ).html(); if( value=="Edit" ){$( ctx ).html( "Save" ); $( ctx ).siblings( "input" ).prop('disabled', false);}else{$( ctx ).html( "Edit" ); $( ctx ).siblings( "input" ).prop('disabled', true); var inputValue=$( ctx ).siblings( "input" ).val(); var inputId=$( ctx ).siblings( "input" ).attr( "dra-input-id" ); this.testCaseList[ inputId]=inputValue; this.store( ctx );}};DraSimplePredeployCheck.prototype.store=function( ctx ){var list=""; for( var i=0 ; i < this.testCaseList.length ; i++ ){if( typeof( this.testCaseList[ i] ) !="undefined" ){console.log( "id: " + i + ", testcase: " + this.testCaseList[ i] ); list +=this.testCaseList[ i] + ",";}}list=list.substring(0, list.length-1); $( ctx ).parent().siblings( "input" ).val( list );};DraSimplePredeployCheck.prototype.remove=function( ctx ){var inputId=$( ctx ).siblings( "input" ).attr( "dra-input-id" ); delete this.testCaseList[ inputId]; this.store( ctx ); $( ctx ).parent().remove();};</script>

PROJECT_KEY_KEY=DRA Project Key
PROJECT_KEY_DESC=DRA Project Key from the Registration API (<a href="http://da.oneibmcloud.com/apidocs/#api-Register-PostProject" target="_blank">http://da.oneibmcloud.com/apidocs/#api-Register-PostProject</a>)

SERVICE_LIST_KEY=Service List:
SERVICE_LIST_DESC=List of  Bluemix services or applications that your application relies on, seperated by commas (for example: alchemy_api [Free],activedeploy [free],Analytics for Apache Hadoop [Free],apiHarmony [API Harmony free plan]). Copy the service or application names from estado.<region>.bluemix.net (for example <a href="http://estado.ng.bluemix.net/rest/status" target="_blank">http://estado.ng.bluemix.net/rest/status</a> for us-south region).<script>new DraSimplePredeployCheck()</script>

ATTEMPT_MAX_KEY=Attempts
ATTEMPT_MAX_DESC=Number of attempts to be made by the process to retrieve service information, in case of any failure. Between consequtive attempts, process pauses for 6 seconds and tries again to get information about the services.

SERVER_DESC=Deployment Risk Analytics server address

USER_ID_KEY=Username - DRA TEST
USER_ID_DESC=The Sauce Labs username.  Tests should use the SAUCE_USERNAME environment variable..

ACCESS_KEY=Access Key
ACCESS_KEY_DESC=The Sauce Labs access key.  Tests should use the SAUCE_ACCESS_KEY environment variable.

SELECT_CMD_KEY=Test Execution Command:
SELECT_CMD_DESC=Please select the test command that best fits the project test configuration.

EMPTY_KEY=\u0020 
NPM_KEY=npm test
GRUNT_KEY=grunt
GRUNT_T_KEY=grunt test
ANT_KEY=ant test
MVN_KEY=mvn test
CUSTOM_KEY=Custom...

COMMAND_KEY=Custom Test Execution Command:
COMMAND_DESC=Enter the command(s) used to execute the tests for the project.

ASSET_KEY=Download Selenium logs and job videos
ASSET_DESC=Choose whether to download Selenium logs and videos from jobs as artifacts.

DRA_KEY=Send Sauce Labs logs to DRA
DRA_DESC=Choose whether to the Sauce Labs log data to DRA for analytics.